package com.carlos.web_proyecto1.Parser;

import com.carlos.web_proyecto1.Lexer.lexerSQFORM;
import com.carlos.web_proyecto1.DataBases.DBRespuestas;
import com.carlos.web_proyecto1.Objetos.*;
import com.carlos.web_proyecto1.EDD.*;
import com.carlos.web_proyecto1.Tokens.token;
import com.carlos.web_proyecto1.GuardadoInfo.Respuesta;
import com.carlos.web_proyecto1.GuardadoInfo.RespuestaFormulario;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;

class parserSQFORM;

parser code {:

    private List<String> errorsList = new ArrayList();
    private DBRespuestas baseRespuestas;

    public parserSQFORM(lexerSQFORM lex,DBRespuestas baseRespuestas){
        super(lex);
        this.baseRespuestas = baseRespuestas;
    }

    public void report_error(String message, Object info){
        Symbol symbol = cur_token;
        token tok = (token)symbol.value;
        if (tok != null) {
            System.out.println("Parametro inesperado: |" + ((tok.getLexeme().equals("\"")) ? "comilla" : tok.getLexeme()) + "| Linea: " + tok.getLine() + ", Columna: " + tok.getColumn());
            errorsList.add("Parametro inesperado: |" + ((tok.getLexeme().equals("\"")) ? "comilla" : tok.getLexeme()) + "| Linea: " + tok.getLine() + ", Columna: " + tok.getColumn());
        }
    }

    public void report_fatal_error(String message, Object info){
        System.out.println(info.toString());
        System.out.println("reportfatal");
    }
        
    public void errorVerificacion(String mensage,Object info){
        token tok = (token)info;
        System.out.println(mensage+"Componente ubicado en Linea: "+tok.getLine()+", Columna: "+tok.getColumn());
        errorsList.add(mensage+"Componente ubicado en Linea: "+tok.getLine()+", Columna: "+tok.getColumn());
    }

    public void errorParametroDuplicado(Object simbolo){
        token tok = (token)simbolo;
        System.out.println("El parametro ubicado en Linea: "+tok.getLine()+", Columna: "+tok.getColumn()+" ya se habia definido con anterioridad");
        errorsList.add("El parametro ubicado en Linea: "+tok.getLine()+", Columna: "+tok.getColumn()+" ya se habia definido con anterioridad");
    }

    private List<RespuestaFormulario> formulariosCompatibleByIdComponente(List<RespuestaFormulario> respuestas,String id){
        List<RespuestaFormulario> list =null;
        if(!respuestas.isEmpty()){
            for (RespuestaFormulario respuestaFormulario : respuestas) {
                for (Respuesta respuesta : respuestaFormulario.getRespuestas()) {
                    if(respuesta.getIdComponente().equals(id)){
                        list.add(respuestaFormulario);
                        break;
                    }
                }
            }
        }
        return list;
    }
    private List<RespuestaFormulario> formulariosCompatibleByNameComponente(List<RespuestaFormulario> respuestas,String nombre){
        List<RespuestaFormulario> list =null;
        if(!respuestas.isEmpty()){
            for (RespuestaFormulario respuestaFormulario : respuestas) {
                for (Respuesta respuesta : respuestaFormulario.getRespuestas()) {
                    if(respuesta.getNombre_campo().equals(nombre)){
                        list.add(respuestaFormulario);
                        break;
                    }
                }
            }
        }        
        return list;
    }

    protected int error_sync_size() {
		return 1;
	}
    public List<String> getErrorsList(){
	    return errorsList;
	}

:}

terminal   AND,OR,NOT,SELECT,TO,FORM,WHERE,COMA,DIR,ME_Q,MA_Q,ME_Q_MA_Q,C_A,C_C,EQ,MA_EQ,ME_EQ,NUM,VALUE,PARAM,ID;

non terminal    inicio,formulario,camposProyectar,condicional,camposProyectarP,clausula,clausulap,logica,varComparacion,
                operador,negacion,camposProyectar1;

start with inicio;

inicio  ::=  SELECT TO FORM DIR formulario
        |   error
        ;

formulario  ::= ID C_A camposProyectar1:e1 C_C condicional:e2
            {:
            :}
            |   PARAM C_A camposProyectar1:e1 C_C condicional:e2
            {:
            :}
            |   error
            ;

camposProyectar1    ::= camposProyectar
                    |   
                    ;

camposProyectar ::= PARAM:e1 camposProyectarP:e2
                {:
                    if(e2!=null){
                        token tok = ((token)e1);
                        if(((Pila)e2).buscarTag(tok.getLexeme())==false){
                            ((Pila)e2).push(tok.getLexeme(),tok.getLexeme());
                        }else{
                            errorParametroDuplicado(e1);
                        }
                    }
                    RESULT = e2;
                :}
                |   error
                ;

camposProyectarP    ::= COMA camposProyectar:e1
                    {:
                        RESULT = e1;
                    :}
                    |
                    {:
                        RESULT = new Pila();
                    :}
                    |   error
                    ;

condicional ::= WHERE C_A clausula C_C
            |
            |   error
            ;

clausula    ::= negacion:e1 ID:e2 operador:e3 varComparacion:e4 clausulap:e5
            {:
                if(e1!=null){
                    if(e3!=null){
                        String id = ((token)e2).getLexeme();
                        System.out.println("id: "+id);
                        if(e5!=null){
                            List<RespuestaFormulario> list = ((clausula)e5).getResForms();
                            System
                            token tmp = (token) e3;
                            switch (tmp.getLexeme()) {
                                case "=":
                                    break;
                                case ">":
                                    break;
                                case "<":
                                    break;
                                case ">=":
                                    break;
                                case "<=":
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                }else{
                    if(e3!=null){
                        
                    }
                }
                RESULT =e5;
            :}
            |   negacion:e1 PARAM:e2 operador:e3 varComparacion:e4 clausulap:e5
            {:
                if(e1!=null){

                }else{

                }
                RESULT =e5;
            :}
            |   error
            ;

clausulap   ::= logica:e2 clausula:e1
            {:
                if(e1!=null){
                    if(e2!=null){
                        ((Clausula)e1).setOperadorLogico(((token)e2).getLexeme());
                    }
                }

                RESULT = e1;
            :}
            |   
            {:
                RESULT = new Clausula(baseRespuestas.getRespuestas(),"NULL");
            :}
            |   error
            ;

negacion    ::= NOT:e1
            {:
                RESULT = e1;
            :}
            |
            ;

logica  ::= OR:e1
        {:
            RESULT =e1;
        :}
        |   AND:e1
        {:
            RESULT =e1;
        :}
        |   error
        ;

operador    ::= ME_Q:e1
            {:
                RESULT = e1;
            :}
            |   MA_Q:e1
            {:
                RESULT = e1;
            :}
            |   ME_EQ:e1
            {:
                RESULT = e1;
            :}
            |   MA_EQ:e1
            {:
                RESULT = e1;
            :}
            |   EQ:e1
            {:
                RESULT = e1;
            :}
            |   ME_Q_MA_Q:e1
            {:
                RESULT = e1;
            :}
            |   error
            ;

varComparacion  ::= NUM:e1
                {:
                    RESULT = e1;
                :}
                |   VALUE:e1
                {:
                    RESULT = e1;
                :}
                |   error
                ;