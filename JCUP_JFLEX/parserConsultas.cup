package com.carlos.web_proyecto1.Parser;

import com.carlos.web_proyecto1.Lexer.lexerSQFORM;
import com.carlos.web_proyecto1.DataBases.*;
import com.carlos.web_proyecto1.Objetos.*;
import com.carlos.web_proyecto1.EDD.*;
import com.carlos.web_proyecto1.Acciones.*;
import com.carlos.web_proyecto1.Tokens.token;
import com.carlos.web_proyecto1.GuardadoInfo.Respuesta;
import com.carlos.web_proyecto1.GuardadoInfo.RespuestaFormulario;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;

class parserSQFORM;

parser code {:

    private List<String> errorsList = new ArrayList();
    private DBRespuestas baseRespuestas;
    private DBFormularios baseFormularios;
    private ProcesarConsulta consultasProcesar;
    private PaqueteConsultas resultadoConsulta;

    public parserSQFORM(lexerSQFORM lex,DBRespuestas baseRespuestas,DBFormularios baseFormularios){
        super(lex);
        this.baseRespuestas = baseRespuestas;
        this.baseFormularios = baseFormularios;
    }

    public PaqueteConsultas obtenerResultado(){
        return resultadoConsulta;
    }

    public void report_error(String message, Object info){
        Symbol symbol = cur_token;
        token tok = (token)symbol.value;
        if (tok != null) {
            System.out.println("Parametro inesperado: |" + ((tok.getLexeme().equals("\"")) ? "comilla" : tok.getLexeme()) + "| Linea: " + tok.getLine() + ", Columna: " + tok.getColumn());
            errorsList.add("Parametro inesperado: |" + ((tok.getLexeme().equals("\"")) ? "comilla" : tok.getLexeme()) + "| Linea: " + tok.getLine() + ", Columna: " + tok.getColumn());
        }
    }

    public void report_fatal_error(String message, Object info){
        System.out.println(info.toString());
        System.out.println("reportfatal");
    }
        
    public void errorVerificacion(String campo){
        System.out.println("El campo ["+campo+"] de la consulta no pertenece al formulario");
        errorsList.add("El campo ["+campo+"] de la consulta no pertenece al formulario");
    }

    public void errorParametroDuplicado(Object simbolo){
        token tok = (token)simbolo;
        System.out.println("El parametro ubicado en Linea: "+tok.getLine()+", Columna: "+tok.getColumn()+" ya se habia definido con anterioridad");
        errorsList.add("El parametro ubicado en Linea: "+tok.getLine()+", Columna: "+tok.getColumn()+" ya se habia definido con anterioridad");
    }


    protected int error_sync_size() {
		return 1;
	}
    public List<String> getErrorsList(){
	    return errorsList;
	}

:}

terminal   AND,OR,NOT,SELECT,TO,FORM,WHERE,COMA,DIR,ME_Q,MA_Q,ME_Q_MA_Q,C_A,C_C,EQ,MA_EQ,ME_EQ,NUM,VALUE,PARAM,ID;

non terminal    inicio,formulario,camposProyectar,condicional,camposProyectarP,clausula,clausulap,logica,varComparacion,
                operador,negacion,camposProyectar1;

start with inicio;

inicio  ::=  SELECT TO FORM DIR formulario:e1
        {:
            if(e1!=null){
                resultadoConsulta = (PaqueteConsultas)e1;
            }
        :}
        |   error
        ;

formulario  ::= ID:e3 C_A camposProyectar1:e1 C_C condicional:e2
            {:
                List<RespuestaFormulario> idRespuestas = baseRespuestas.respuestasIDForm(((token)e3).getLexeme());
                if(!idRespuestas.isEmpty()){    
                    if(e2!=null){
                        consultasProcesar = new ProcesarConsulta(idRespuestas, ((Cola)e2));
                        if(e1!=null){

                            Pila tmp = (Pila)e1;
                            String campo;
                            List<String> campos = new ArrayList<>();
                            while (!tmp.isEmpty()) {                                
                                campo = (String)tmp.pop();
                                if(baseFormularios.buscarComponeteNombre(((token)e3).getLexeme(), campo)!=null){
                                    campos.add(campo);
                                }else{
                                    errorVerificacion(campo);
                                }
                            }

                            PaqueteConsultas res = new PaqueteConsultas(((token)e3).getLexeme(),null,null, consultasProcesar.procesar(), campos);
                            RESULT = res;

                        }else{  
                            PaqueteConsultas res = new PaqueteConsultas(((token)e3).getLexeme(),null,null, consultasProcesar.procesar(), null);
                            RESULT = res;
                        }
                    }else{
                        if(e1!=null){

                            Pila tmp = (Pila)e1;
                            String campo;
                            List<String> campos = new ArrayList<>();
                            
                            while (!tmp.isEmpty()) {                                
                                campo = (String)tmp.pop();
                                if(baseFormularios.buscarComponeteNombre(((token)e3).getLexeme(), campo)!=null){
                                    campos.add(campo);
                                }else{
                                    errorVerificacion(campo);
                                }
                            }
                            PaqueteConsultas res = new PaqueteConsultas(((token)e3).getLexeme(),null,null,idRespuestas, campos);
                            RESULT = res;

                        }else{
                            PaqueteConsultas res = new PaqueteConsultas(((token)e3).getLexeme(),null,null,idRespuestas, null);
                            RESULT = res;
                        }
                    }
                }
            :}
            |   PARAM:e3 C_A camposProyectar1:e1 C_C condicional:e2
            {:
                List<RespuestaFormulario> idRespuestas = baseRespuestas.respuestasNameForm(((token)e3).getLexeme());
                if(!idRespuestas.isEmpty()){    
                    if(e2!=null){
                        consultasProcesar = new ProcesarConsulta(idRespuestas, ((Cola)e2));
                        if(e1!=null){

                            Pila tmp = (Pila)e1;
                            String campo;
                            List<String> campos = new ArrayList<>();
                            
                            while (!tmp.isEmpty()) {                                
                                campo = (String)tmp.pop();
                                if(baseFormularios.buscarComponeteNombre(((token)e3).getLexeme(), campo)!=null){
                                    campos.add(campo);
                                }else{
                                    errorVerificacion(campo);
                                }
                            }
                            PaqueteConsultas res = new PaqueteConsultas(null,((token)e3).getLexeme(),null, consultasProcesar.procesar(), campos);
                            RESULT = res;

                        }else{  
                            PaqueteConsultas res = new PaqueteConsultas(null,((token)e3).getLexeme(),null,consultasProcesar.procesar(), null);
                            RESULT = res;
                        }
                    }else{
                        RESULT = idRespuestas;
                        if(e1!=null){

                            Pila tmp = (Pila)e1;
                            String campo;
                            List<String> campos = new ArrayList<>();
                            
                            while (!tmp.isEmpty()) {                                
                                campo = (String)tmp.pop();
                                if(baseFormularios.buscarComponeteNombre(((token)e3).getLexeme(), campo)!=null){
                                    campos.add(campo);
                                }else{
                                    errorVerificacion(campo);
                                }
                            }
                            PaqueteConsultas res = new PaqueteConsultas(null,((token)e3).getLexeme(),null,idRespuestas, campos);
                            RESULT = res;

                        }else{
                            PaqueteConsultas res = new PaqueteConsultas(null,((token)e3).getLexeme(),null, idRespuestas, null);
                            RESULT = res;
                        }
                    }
                }
            :}
            |   error
            ;

camposProyectar1    ::= camposProyectar:e1
                    {:
                        RESULT = e1;
                    :}
                    |   
                    ;

camposProyectar ::= PARAM:e1 camposProyectarP:e2
                {:
                    if(e2!=null){
                        token tok = ((token)e1);
                        if(((Pila)e2).buscarTag(tok.getLexeme())==false){
                            ((Pila)e2).push(tok.getLexeme(),tok.getLexeme());
                        }else{
                            errorParametroDuplicado(e1);
                        }
                    }
                    RESULT = e2;
                :}
                |   error
                ;

camposProyectarP    ::= COMA camposProyectar:e1
                    {:
                        RESULT = e1;
                    :}
                    |
                    {:
                        RESULT = new Pila();
                    :}
                    |   error
                    ;

condicional ::= WHERE C_A clausula:e1 C_C
            {:
                RESULT = e1;
            :}
            |
            |   error
            ;

clausula    ::= negacion:e1 ID:e2 operador:e3 varComparacion:e4 clausulap:e5
            {:
                Operacion tmp = null;
                if (e3!=null){
                    if(e3!=null){
                        if(e1!=null){
                            if(e5!=null){
                                tmp = new Operacion(null,"SI","ID", ((token)e2).getLexeme(),((token)e3).getLexeme(), ((token)e4).getLexeme());
                                ((Cola)e5).agregar(tmp);
                            }
                        }else{
                            if(e5!=null){
                                tmp = new Operacion(null,"NO","ID", ((token)e2).getLexeme(),((token)e3).getLexeme(), ((token)e4).getLexeme());
                                ((Cola)e5).agregar(tmp);
                            }
                        }
                    }
                }
                RESULT =e5;
            :}
            |   negacion:e1 PARAM:e2 operador:e3 varComparacion:e4 clausulap:e5
            {:
                Operacion tmp = null;
                if (e3!=null){
                    if(e3!=null){
                        if(e1!=null){
                            if(e5!=null){
                                tmp = new Operacion(null,"SI","NOMBRE", ((token)e2).getLexeme(),((token)e3).getLexeme(), ((token)e4).getLexeme());
                                ((Cola)e5).agregar(tmp);
                            }
                        }else{
                            if(e5!=null){
                                tmp = new Operacion(null,"NO","NOMBRE", ((token)e2).getLexeme(),((token)e3).getLexeme(), ((token)e4).getLexeme());
                                ((Cola)e5).agregar(tmp);
                            }
                        }
                    }
                }
                RESULT =e5;
            :}
            |   error
            ;

clausulap   ::= logica:e2 clausula:e1
            {:
                if(e1!=null){
                    Cola tmp = ((Cola)e1);
                    Operacion ope = (Operacion)tmp.ver();
                    if(e2!=null){
                        ope.setLogica(((token)e2).getLexeme());
                    }
                }
                RESULT = e1;
            :}
            |   
            {:
                RESULT = new Cola();
            :}
            |   error
            ;

negacion    ::= NOT:e1
            {:
                RESULT = e1;
            :}
            |
            ;

logica  ::= OR:e1
        {:
            RESULT =e1;
        :}
        |   AND:e1
        {:
            RESULT =e1;
        :}
        |   error
        ;

operador    ::= ME_Q:e1
            {:
                RESULT = e1;
            :}
            |   MA_Q:e1
            {:
                RESULT = e1;
            :}
            |   ME_EQ:e1
            {:
                RESULT = e1;
            :}
            |   MA_EQ:e1
            {:
                RESULT = e1;
            :}
            |   EQ:e1
            {:
                RESULT = e1;
            :}
            |   ME_Q_MA_Q:e1
            {:
                RESULT = e1;
            :}
            |   error
            ;

varComparacion  ::= NUM:e1
                {:
                    RESULT = e1;
                :}
                |   VALUE:e1
                {:
                    RESULT = e1;
                :}
                |   error
                ;