package com.carlos.web_proyecto1.Parser;

import com.carlos.web_proyecto1.Lexer.lexerSQFORM;
import com.carlos.web_proyecto1.Tokens.token;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;

class parserSQFORM;

parser code {:

    private List<String> errorsList = new ArrayList();

    public parserSQFORM(lexerSQFORM lex){
        super(lex);
    }

    public void report_error(String message, Object info){
        Symbol symbol = cur_token;
        token tok = (token)symbol.value;
        if (tok != null) {
            System.out.println("Parametro inesperado: |" + ((tok.getLexeme().equals("\"")) ? "comilla" : tok.getLexeme()) + "| Linea: " + tok.getLine() + ", Columna: " + tok.getColumn());
            errorsList.add("Parametro inesperado: |" + ((tok.getLexeme().equals("\"")) ? "comilla" : tok.getLexeme()) + "| Linea: " + tok.getLine() + ", Columna: " + tok.getColumn());
        }
    }

    public void report_fatal_error(String message, Object info){
        System.out.println(info.toString());
        System.out.println("reportfatal");
    }
        
    public void errorVerificacion(String mensage,Object info){
        token tok = (token)info;
        System.out.println(mensage+"Componente ubicado en Linea: "+tok.getLine()+", Columna: "+tok.getColumn());
        errorsList.add(mensage+"Componente ubicado en Linea: "+tok.getLine()+", Columna: "+tok.getColumn());
    }

    public void errorParametroDuplicado(Object simbolo){
        token tok = (token)simbolo;
        System.out.println("El parametro del componente ubicado en Linea: "+tok.getLine()+", Columna: "+tok.getColumn()+" ya se habia definido con anterioridad");
        errorsList.add("El parametro del componente ubicado en Linea: "+tok.getLine()+", Columna: "+tok.getColumn()+" ya se habia definido con anterioridad");
    }

    protected int error_sync_size() {
		return 1;
	}
    public List<String> getErrorsList(){
	    return errorsList;
	}

:}

terminal   AND,OR,NOT,SELECT,TO,FORM,WHERE,COMA,DIR,ME_Q,MA_Q,ME_Q_MA_Q,C_A,C_C,EQ,MA_EQ,ME_EQ,NUM,VALUE,PARAM;

non terminal    inicio;

start with inicio;

inicio ::= NUM
        ;
