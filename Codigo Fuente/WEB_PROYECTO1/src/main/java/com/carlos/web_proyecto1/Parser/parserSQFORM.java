
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.carlos.web_proyecto1.Parser;

import com.carlos.web_proyecto1.Lexer.lexerSQFORM;
import com.carlos.web_proyecto1.DataBases.*;
import com.carlos.web_proyecto1.Objetos.*;
import com.carlos.web_proyecto1.EDD.*;
import com.carlos.web_proyecto1.Acciones.*;
import com.carlos.web_proyecto1.Tokens.token;
import com.carlos.web_proyecto1.GuardadoInfo.Respuesta;
import com.carlos.web_proyecto1.GuardadoInfo.RespuestaFormulario;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserSQFORM extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return parserSQFORMSym.class;
}

  /** Default constructor. */
  @Deprecated
  public parserSQFORM() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserSQFORM(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserSQFORM(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\002\007\000\002\002" +
    "\003\000\002\003\007\000\002\003\007\000\002\003\003" +
    "\000\002\015\003\000\002\015\002\000\002\004\004\000" +
    "\002\004\003\000\002\006\004\000\002\006\002\000\002" +
    "\006\003\000\002\005\006\000\002\005\002\000\002\005" +
    "\003\000\002\007\007\000\002\007\007\000\002\007\003" +
    "\000\002\010\004\000\002\010\002\000\002\010\003\000" +
    "\002\014\003\000\002\014\002\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\072\000\006\003\004\007\006\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\074\001\002\000\004\010\007" +
    "\001\002\000\004\011\010\001\002\000\004\014\011\001" +
    "\002\000\010\003\014\027\015\030\012\001\002\000\004" +
    "\020\070\001\002\000\004\002\000\001\002\000\004\002" +
    "\ufffc\001\002\000\004\020\016\001\002\000\010\003\020" +
    "\021\ufffa\027\022\001\002\000\004\021\ufffb\001\002\000" +
    "\004\021\ufff8\001\002\000\004\021\027\001\002\000\010" +
    "\003\024\013\023\021\ufff6\001\002\000\006\003\020\027" +
    "\022\001\002\000\004\021\ufff5\001\002\000\004\021\ufff9" +
    "\001\002\000\004\021\ufff7\001\002\000\010\002\ufff3\003" +
    "\030\012\031\001\002\000\004\002\ufff2\001\002\000\004" +
    "\020\033\001\002\000\004\002\ufffd\001\002\000\012\003" +
    "\035\006\034\027\uffea\030\uffea\001\002\000\006\027\uffeb" +
    "\030\uffeb\001\002\000\004\021\uffef\001\002\000\004\021" +
    "\067\001\002\000\006\027\041\030\040\001\002\000\020" +
    "\003\046\015\050\016\045\017\043\022\044\023\051\024" +
    "\047\001\002\000\020\003\046\015\050\016\045\017\043" +
    "\022\044\023\051\024\047\001\002\000\010\003\053\025" +
    "\052\026\055\001\002\000\010\003\uffe1\025\uffe1\026\uffe1" +
    "\001\002\000\010\003\uffe2\025\uffe2\026\uffe2\001\002\000" +
    "\010\003\uffe5\025\uffe5\026\uffe5\001\002\000\010\003\uffe0" +
    "\025\uffe0\026\uffe0\001\002\000\010\003\uffe4\025\uffe4\026" +
    "\uffe4\001\002\000\010\003\uffe6\025\uffe6\026\uffe6\001\002" +
    "\000\010\003\uffe3\025\uffe3\026\uffe3\001\002\000\012\003" +
    "\uffdf\004\uffdf\005\uffdf\021\uffdf\001\002\000\012\003\uffdd" +
    "\004\uffdd\005\uffdd\021\uffdd\001\002\000\012\003\057\004" +
    "\056\005\062\021\uffed\001\002\000\012\003\uffde\004\uffde" +
    "\005\uffde\021\uffde\001\002\000\012\003\uffe8\006\uffe8\027" +
    "\uffe8\030\uffe8\001\002\000\014\003\uffe7\006\uffe7\021\uffec" +
    "\027\uffe7\030\uffe7\001\002\000\004\021\ufff0\001\002\000" +
    "\012\003\035\006\034\027\uffea\030\uffea\001\002\000\012" +
    "\003\uffe9\006\uffe9\027\uffe9\030\uffe9\001\002\000\004\021" +
    "\uffee\001\002\000\010\003\053\025\052\026\055\001\002" +
    "\000\012\003\057\004\056\005\062\021\uffed\001\002\000" +
    "\004\021\ufff1\001\002\000\004\002\ufff4\001\002\000\010" +
    "\003\020\021\ufffa\027\022\001\002\000\004\021\072\001" +
    "\002\000\010\002\ufff3\003\030\012\031\001\002\000\004" +
    "\002\ufffe\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\072\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\016\015\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\024\001\001\000\004" +
    "\004\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\035\014" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\063\001\001\000" +
    "\004\013\041\001\001\000\004\012\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\057\011" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\062\014\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\064" +
    "\001\001\000\006\010\065\011\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\016\015\070\001\001" +
    "\000\002\001\001\000\004\005\072\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserSQFORM$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserSQFORM$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserSQFORM$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private List<String> errorsList = new ArrayList();
    private DBRespuestas baseRespuestas;
    private DBFormularios baseFormularios;
    private ProcesarConsulta consultasProcesar;
    private PaqueteConsultas resultadoConsulta;

    public parserSQFORM(lexerSQFORM lex,DBRespuestas baseRespuestas,DBFormularios baseFormularios){
        super(lex);
        this.baseRespuestas = baseRespuestas;
        this.baseFormularios = baseFormularios;
    }

    public PaqueteConsultas obtenerResultado(){
        return resultadoConsulta;
    }

    public void report_error(String message, Object info){
        Symbol symbol = cur_token;
        token tok = (token)symbol.value;
        if (tok != null) {
            System.out.println("Parametro inesperado: |" + ((tok.getLexeme().equals("\"")) ? "comilla" : tok.getLexeme()) + "| Linea: " + tok.getLine() + ", Columna: " + tok.getColumn());
            errorsList.add("Parametro inesperado: |" + ((tok.getLexeme().equals("\"")) ? "comilla" : tok.getLexeme()) + "| Linea: " + tok.getLine() + ", Columna: " + tok.getColumn());
        }
    }

    public void report_fatal_error(String message, Object info){
        System.out.println(info.toString());
        System.out.println("reportfatal");
    }
        
    public void errorVerificacion(String campo){
        System.out.println("El campo ["+campo+"] de la consulta no pertenece al formulario");
        errorsList.add("El campo ["+campo+"] de la consulta no pertenece al formulario");
    }

    public void errorParametroDuplicado(Object simbolo){
        token tok = (token)simbolo;
        System.out.println("El parametro ubicado en Linea: "+tok.getLine()+", Columna: "+tok.getColumn()+" ya se habia definido con anterioridad");
        errorsList.add("El parametro ubicado en Linea: "+tok.getLine()+", Columna: "+tok.getColumn()+" ya se habia definido con anterioridad");
    }


    protected int error_sync_size() {
		return 1;
	}
    public List<String> getErrorsList(){
	    return errorsList;
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserSQFORM$actions {
  private final parserSQFORM parser;

  /** Constructor */
  CUP$parserSQFORM$actions(parserSQFORM parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserSQFORM$do_action_part00000000(
    int                        CUP$parserSQFORM$act_num,
    java_cup.runtime.lr_parser CUP$parserSQFORM$parser,
    java.util.Stack            CUP$parserSQFORM$stack,
    int                        CUP$parserSQFORM$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserSQFORM$result;

      /* select the action based on the action number */
      switch (CUP$parserSQFORM$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-1)).value;
		RESULT = start_val;
              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-1)), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserSQFORM$parser.done_parsing();
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= SELECT TO FORM DIR formulario 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.peek()).value;
		
            if(e1!=null){
                resultadoConsulta = (PaqueteConsultas)e1;
            }
        
              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-4)), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error 
            {
              Object RESULT =null;

              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // formulario ::= ID C_A camposProyectar1 C_C condicional 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-4)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.peek()).value;
		
                List<RespuestaFormulario> idRespuestas = baseRespuestas.respuestasIDForm(((token)e3).getLexeme());
                if(!idRespuestas.isEmpty()){    
                    if(e2!=null){
                        consultasProcesar = new ProcesarConsulta(idRespuestas, ((Cola)e2));
                        if(e1!=null){

                            Pila tmp = (Pila)e1;
                            String campo;
                            List<String> campos = new ArrayList<>();
                            while (!tmp.isEmpty()) {                                
                                campo = (String)tmp.pop();
                                if(baseFormularios.buscarComponeteNombre(((token)e3).getLexeme(), campo)!=null){
                                    campos.add(campo);
                                }else{
                                    errorVerificacion(campo);
                                }
                            }

                            PaqueteConsultas res = new PaqueteConsultas(((token)e3).getLexeme(),null,null, consultasProcesar.procesar(), campos);
                            RESULT = res;

                        }else{  
                            PaqueteConsultas res = new PaqueteConsultas(((token)e3).getLexeme(),null,null, consultasProcesar.procesar(), null);
                            RESULT = res;
                        }
                    }else{
                        if(e1!=null){

                            Pila tmp = (Pila)e1;
                            String campo;
                            List<String> campos = new ArrayList<>();
                            
                            while (!tmp.isEmpty()) {                                
                                campo = (String)tmp.pop();
                                if(baseFormularios.buscarComponeteNombre(((token)e3).getLexeme(), campo)!=null){
                                    campos.add(campo);
                                }else{
                                    errorVerificacion(campo);
                                }
                            }
                            PaqueteConsultas res = new PaqueteConsultas(((token)e3).getLexeme(),null,null,idRespuestas, campos);
                            RESULT = res;

                        }else{
                            PaqueteConsultas res = new PaqueteConsultas(((token)e3).getLexeme(),null,null,idRespuestas, null);
                            RESULT = res;
                        }
                    }
                }
            
              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("formulario",1, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-4)), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // formulario ::= PARAM C_A camposProyectar1 C_C condicional 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-4)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.peek()).value;
		
                List<RespuestaFormulario> idRespuestas = baseRespuestas.respuestasNameForm(((token)e3).getLexeme());
                if(!idRespuestas.isEmpty()){    
                    if(e2!=null){
                        consultasProcesar = new ProcesarConsulta(idRespuestas, ((Cola)e2));
                        if(e1!=null){

                            Pila tmp = (Pila)e1;
                            String campo;
                            List<String> campos = new ArrayList<>();
                            
                            while (!tmp.isEmpty()) {                                
                                campo = (String)tmp.pop();
                                if(baseFormularios.buscarComponeteNombre(((token)e3).getLexeme(), campo)!=null){
                                    campos.add(campo);
                                }else{
                                    errorVerificacion(campo);
                                }
                            }
                            PaqueteConsultas res = new PaqueteConsultas(null,((token)e3).getLexeme(),null, consultasProcesar.procesar(), campos);
                            RESULT = res;

                        }else{  
                            PaqueteConsultas res = new PaqueteConsultas(null,((token)e3).getLexeme(),null,consultasProcesar.procesar(), null);
                            RESULT = res;
                        }
                    }else{
                        RESULT = idRespuestas;
                        if(e1!=null){

                            Pila tmp = (Pila)e1;
                            String campo;
                            List<String> campos = new ArrayList<>();
                            
                            while (!tmp.isEmpty()) {                                
                                campo = (String)tmp.pop();
                                if(baseFormularios.buscarComponeteNombre(((token)e3).getLexeme(), campo)!=null){
                                    campos.add(campo);
                                }else{
                                    errorVerificacion(campo);
                                }
                            }
                            PaqueteConsultas res = new PaqueteConsultas(null,((token)e3).getLexeme(),null,idRespuestas, campos);
                            RESULT = res;

                        }else{
                            PaqueteConsultas res = new PaqueteConsultas(null,((token)e3).getLexeme(),null, idRespuestas, null);
                            RESULT = res;
                        }
                    }
                }
            
              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("formulario",1, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-4)), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // formulario ::= error 
            {
              Object RESULT =null;

              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("formulario",1, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // camposProyectar1 ::= camposProyectar 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.peek()).value;
		
                        RESULT = e1;
                    
              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("camposProyectar1",11, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // camposProyectar1 ::= 
            {
              Object RESULT =null;

              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("camposProyectar1",11, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // camposProyectar ::= PARAM camposProyectarP 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.peek()).value;
		
                    if(e2!=null){
                        token tok = ((token)e1);
                        if(((Pila)e2).buscarTag(tok.getLexeme())==false){
                            ((Pila)e2).push(tok.getLexeme(),tok.getLexeme());
                        }else{
                            errorParametroDuplicado(e1);
                        }
                    }
                    RESULT = e2;
                
              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("camposProyectar",2, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-1)), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // camposProyectar ::= error 
            {
              Object RESULT =null;

              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("camposProyectar",2, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // camposProyectarP ::= COMA camposProyectar 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.peek()).value;
		
                        RESULT = e1;
                    
              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("camposProyectarP",4, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-1)), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // camposProyectarP ::= 
            {
              Object RESULT =null;
		
                        RESULT = new Pila();
                    
              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("camposProyectarP",4, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // camposProyectarP ::= error 
            {
              Object RESULT =null;

              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("camposProyectarP",4, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // condicional ::= WHERE C_A clausula C_C 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-1)).value;
		
                RESULT = e1;
            
              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("condicional",3, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-3)), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // condicional ::= 
            {
              Object RESULT =null;

              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("condicional",3, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // condicional ::= error 
            {
              Object RESULT =null;

              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("condicional",3, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // clausula ::= negacion ID operador varComparacion clausulap 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-1)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.peek()).value;
		
                Operacion tmp = null;
                if (e3!=null){
                    if(e3!=null){
                        if(e1!=null){
                            if(e5!=null){
                                tmp = new Operacion(null,"SI","ID", ((token)e2).getLexeme(),((token)e3).getLexeme(), ((token)e4).getLexeme());
                                ((Cola)e5).agregar(tmp);
                            }
                        }else{
                            if(e5!=null){
                                tmp = new Operacion(null,"NO","ID", ((token)e2).getLexeme(),((token)e3).getLexeme(), ((token)e4).getLexeme());
                                ((Cola)e5).agregar(tmp);
                            }
                        }
                    }
                }
                RESULT =e5;
            
              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("clausula",5, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-4)), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // clausula ::= negacion PARAM operador varComparacion clausulap 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-1)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.peek()).value;
		
                Operacion tmp = null;
                if (e3!=null){
                    if(e3!=null){
                        if(e1!=null){
                            if(e5!=null){
                                tmp = new Operacion(null,"SI","NOMBRE", ((token)e2).getLexeme(),((token)e3).getLexeme(), ((token)e4).getLexeme());
                                ((Cola)e5).agregar(tmp);
                            }
                        }else{
                            if(e5!=null){
                                tmp = new Operacion(null,"NO","NOMBRE", ((token)e2).getLexeme(),((token)e3).getLexeme(), ((token)e4).getLexeme());
                                ((Cola)e5).agregar(tmp);
                            }
                        }
                    }
                }
                RESULT =e5;
            
              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("clausula",5, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-4)), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // clausula ::= error 
            {
              Object RESULT =null;

              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("clausula",5, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // clausulap ::= logica clausula 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.peek()).value;
		
                if(e1!=null){
                    Cola tmp = ((Cola)e1);
                    Operacion ope = (Operacion)tmp.ver();
                    if(e2!=null){
                        ope.setLogica(((token)e2).getLexeme());
                    }
                }
                RESULT = e1;
            
              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("clausulap",6, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.elementAt(CUP$parserSQFORM$top-1)), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // clausulap ::= 
            {
              Object RESULT =null;
		
                RESULT = new Cola();
            
              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("clausulap",6, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // clausulap ::= error 
            {
              Object RESULT =null;

              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("clausulap",6, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // negacion ::= NOT 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.peek()).value;
		
                RESULT = e1;
            
              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("negacion",10, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // negacion ::= 
            {
              Object RESULT =null;

              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("negacion",10, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // logica ::= OR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.peek()).value;
		
            RESULT =e1;
        
              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("logica",7, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // logica ::= AND 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.peek()).value;
		
            RESULT =e1;
        
              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("logica",7, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // logica ::= error 
            {
              Object RESULT =null;

              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("logica",7, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operador ::= ME_Q 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.peek()).value;
		
                RESULT = e1;
            
              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("operador",9, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operador ::= MA_Q 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.peek()).value;
		
                RESULT = e1;
            
              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("operador",9, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operador ::= ME_EQ 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.peek()).value;
		
                RESULT = e1;
            
              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("operador",9, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operador ::= MA_EQ 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.peek()).value;
		
                RESULT = e1;
            
              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("operador",9, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operador ::= EQ 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.peek()).value;
		
                RESULT = e1;
            
              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("operador",9, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operador ::= ME_Q_MA_Q 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.peek()).value;
		
                RESULT = e1;
            
              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("operador",9, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operador ::= error 
            {
              Object RESULT =null;

              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("operador",9, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // varComparacion ::= NUM 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.peek()).value;
		
                    RESULT = e1;
                
              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("varComparacion",8, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // varComparacion ::= VALUE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserSQFORM$stack.peek()).value;
		
                    RESULT = e1;
                
              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("varComparacion",8, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // varComparacion ::= error 
            {
              Object RESULT =null;

              CUP$parserSQFORM$result = parser.getSymbolFactory().newSymbol("varComparacion",8, ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserSQFORM$stack.peek()), RESULT);
            }
          return CUP$parserSQFORM$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserSQFORM$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserSQFORM$do_action(
    int                        CUP$parserSQFORM$act_num,
    java_cup.runtime.lr_parser CUP$parserSQFORM$parser,
    java.util.Stack            CUP$parserSQFORM$stack,
    int                        CUP$parserSQFORM$top)
    throws java.lang.Exception
    {
              return CUP$parserSQFORM$do_action_part00000000(
                               CUP$parserSQFORM$act_num,
                               CUP$parserSQFORM$parser,
                               CUP$parserSQFORM$stack,
                               CUP$parserSQFORM$top);
    }
}

}
