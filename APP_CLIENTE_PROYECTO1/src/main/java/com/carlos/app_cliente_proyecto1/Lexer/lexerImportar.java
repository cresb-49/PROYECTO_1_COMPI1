// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexerImpor_Expor.jflex



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class lexerImportar implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\5\1\7\3\5\1\10\1\11\2\5\1\12"+
    "\1\13\2\5\1\14\1\15\1\16\1\17\6\20\7\5"+
    "\32\21\1\5\1\0\2\5\1\7\1\5\1\22\3\21"+
    "\1\23\1\24\2\21\1\25\2\21\1\26\1\27\1\30"+
    "\1\31\2\21\1\32\2\21\1\33\1\21\1\34\3\21"+
    "\1\35\1\36\1\37\1\5\6\0\1\3\33\0\1\5"+
    "\6\0\1\5\3\0\1\5\3\0\1\5\16\0\1\5"+
    "\u0168\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\2\1\1\1\3\1\4\1\5\1\1"+
    "\1\6\1\7\1\0\1\10\3\0\1\11\25\0\1\12"+
    "\2\0\1\13";

  private static int [] zzUnpackAction() {
    int [] result = new int[43];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\40\0\100\0\140\0\200\0\240\0\40\0\40"+
    "\0\40\0\300\0\40\0\40\0\340\0\40\0\u0100\0\u0120"+
    "\0\u0140\0\40\0\u0160\0\u0180\0\u01a0\0\u01c0\0\u01e0\0\u0200"+
    "\0\u0220\0\u0240\0\u0260\0\u0280\0\u02a0\0\u02c0\0\u02e0\0\u0300"+
    "\0\u0320\0\u0340\0\u0360\0\u0380\0\u03a0\0\u03c0\0\u03e0\0\40"+
    "\0\u0400\0\u0420\0\40";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[43];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\2\1\6\1\2"+
    "\1\7\1\10\1\11\15\2\1\12\4\2\1\13\1\5"+
    "\1\14\41\0\2\3\36\0\1\3\1\4\1\0\1\5"+
    "\31\0\1\5\3\0\1\5\1\0\1\5\31\0\1\5"+
    "\2\0\2\15\2\0\1\15\1\16\1\17\3\15\1\17"+
    "\1\15\4\20\17\15\23\0\1\21\15\0\2\15\2\0"+
    "\1\15\1\16\31\15\1\0\2\15\2\0\1\15\1\22"+
    "\1\17\3\15\22\17\3\15\1\0\2\15\2\0\1\15"+
    "\1\16\5\15\5\23\17\15\34\0\1\24\4\0\2\15"+
    "\2\0\1\15\1\16\5\15\5\25\17\15\2\26\3\0"+
    "\33\26\1\0\2\15\2\0\1\15\1\16\5\15\5\27"+
    "\17\15\24\0\1\30\14\0\2\15\2\0\1\15\1\16"+
    "\4\15\1\31\24\15\31\0\1\32\7\0\2\15\2\0"+
    "\1\15\1\16\5\15\1\33\1\34\22\15\32\0\1\35"+
    "\6\0\2\15\2\0\1\15\1\16\6\15\4\36\17\15"+
    "\1\0\2\15\2\0\1\15\1\16\5\15\3\36\21\15"+
    "\27\0\1\37\11\0\2\15\2\0\1\15\1\16\4\15"+
    "\1\40\24\15\33\0\1\41\5\0\2\15\2\0\1\15"+
    "\1\16\5\15\1\42\2\43\1\44\20\15\26\0\1\45"+
    "\12\0\2\15\2\0\1\15\1\16\6\15\4\46\17\15"+
    "\1\0\2\15\2\0\1\15\1\16\5\15\5\46\17\15"+
    "\1\0\2\15\2\0\1\15\1\16\5\15\2\46\22\15"+
    "\22\0\1\47\16\0\2\15\2\0\1\15\1\50\31\15"+
    "\32\0\1\51\32\0\1\52\43\0\1\53\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1088];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\3\11\1\1\2\11\1\0\1\11"+
    "\3\0\1\11\25\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[43];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol after_symbl = new Symbol(0);
    private Symbol tmp_symbl = new Symbol(0);

    private lexerInerText InerLex= new lexerInerText();

    private obtenerAsignacion getInerText = new obtenerAsignacion();

    private List<String> errorsList = new ArrayList<>();

    private void error(String lexeme) {

        System.out.printf("Error lexico: %s ,linea %d,  columna %d. \n", ((lexeme.equals("\""))?"comilla":lexeme), yyline + 1, yycolumn + 1);
        errorsList.add(String.format("Error Lexico en el Texto: %s  linea %d, columna %d. Corrige e intenta de nuevo.", ((lexeme.equals("\""))?"comilla":lexeme), yyline + 1, yycolumn + 1));
    }
    public List<String> getErrorsList() {
        return errorsList;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexerImportar(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return new java_cup.runtime.Symbol(parserImportarSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { error(yytext());
            }
            // fall through
          case 12: break;
          case 2:
            { /*Do nothing*/
            }
            // fall through
          case 13: break;
          case 3:
            { //System.out.println("Llave cierre: "+yytext());
            tmp_symbl = new Symbol (P_A,after_symbl.sym,0, new token(yytext(),yycolumn+1,yyline+1));
            after_symbl = tmp_symbl;
            return tmp_symbl;
            }
            // fall through
          case 14: break;
          case 4:
            { //System.out.println("Llave cierre: "+yytext());
            tmp_symbl = new Symbol (P_C,after_symbl.sym,0, new token(yytext(),yycolumn+1,yyline+1));
            after_symbl = tmp_symbl;
            return tmp_symbl;
            }
            // fall through
          case 15: break;
          case 5:
            { //System.out.println("Coma: "+yytext());
            tmp_symbl = new Symbol (COM,after_symbl.sym,0, new token(yytext(),yycolumn+1,yyline+1));
            after_symbl = tmp_symbl;
            return tmp_symbl;
            }
            // fall through
          case 16: break;
          case 6:
            { //System.out.println("Llave apertura: "+yytext());
            tmp_symbl = new Symbol (L_A,after_symbl.sym,0, new token(yytext(),yycolumn+1,yyline+1));
            after_symbl = tmp_symbl;
            return tmp_symbl;
            }
            // fall through
          case 17: break;
          case 7:
            { //System.out.println("Llave cierre: "+yytext());
            tmp_symbl = new Symbol (L_C,after_symbl.sym,0, new token(yytext(),yycolumn+1,yyline+1));
            after_symbl = tmp_symbl;
            return tmp_symbl;
            }
            // fall through
          case 18: break;
          case 8:
            { //System.out.println("Texto encontrado:" + yytext());
            String text = getInerText.getAsignacion(yytext());
            int espacios = 0;
            boolean num = false;
            InerLex.yyreset(new StringReader(text));
            try {
                InerLex.yylex();
            } catch (Exception e) {
                e.printStackTrace();
            }
            if (InerLex.getCantidadLexemas() == 1) {
                espacios = InerLex.getCantidadEspacios();
                text = InerLex.getCurrentText();
                num = InerLex.isNumero();
                InerLex.reinicioLex();
                switch (text) {
                    case "ID_FORMULARIO":
                        tmp_symbl = new Symbol(ID_FORM, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "ID":
                        tmp_symbl = new Symbol(ID, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "TITULO":
                        tmp_symbl = new Symbol(TITLE, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "NOMBRE":
                        tmp_symbl = new Symbol(NAME, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "TEMA":
                        tmp_symbl = new Symbol(THEME, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "ESTRUCTURA":
                        tmp_symbl = new Symbol(ESTRUCT, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "NOMBRE_CAMPO":
                        tmp_symbl = new Symbol(NAME_CAMP, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "CLASE":
                        tmp_symbl = new Symbol(CLASS, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "INDICE":
                        tmp_symbl = new Symbol(IND, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "TEXTO_VISIBLE":
                        tmp_symbl = new Symbol(TEXT_VIEW, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "ALINEACION":
                        tmp_symbl = new Symbol(ALI, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "REQUERIDO":
                        tmp_symbl = new Symbol(REQUE, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "OPCIONES":
                        tmp_symbl = new Symbol(OPTION, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "FILAS":
                        tmp_symbl = new Symbol(FILAS, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "COLUMNAS":
                        tmp_symbl = new Symbol(COLM, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "URL​":
                        tmp_symbl = new Symbol(URL, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "CAMPO_TEXTO​":
                        tmp_symbl = new Symbol(CAMP_TEXT, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "AREA_TEXTO":
                        tmp_symbl = new Symbol(TEXT_AREA, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "CHECKBOX":
                        tmp_symbl = new Symbol(CHECK, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "RADIO":
                        tmp_symbl = new Symbol(RADIO, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "FICHERO":
                        tmp_symbl = new Symbol(FILE, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "IMAGEN":
                        tmp_symbl = new Symbol(IMG, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "COMBO":
                        tmp_symbl = new Symbol(COMBO, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "BOTON":
                        tmp_symbl = new Symbol(BOTON, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "CENTRO":
                        tmp_symbl = new Symbol(CENT, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "IZQUIERDA":
                        tmp_symbl = new Symbol(IZQ, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "DERECHA":
                        tmp_symbl = new Symbol(DER, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "JUSTIFICAR":
                        tmp_symbl = new Symbol(JUST, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "SI":
                        tmp_symbl = new Symbol(YES, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    case "NO":
                        tmp_symbl = new Symbol(NOT, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    default:
                        if(num){
                            tmp_symbl = new Symbol(ASIGNACION_NUM, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                            after_symbl = tmp_symbl;
                            return tmp_symbl;
                        }else{
                            if (espacios == 0) {
                                tmp_symbl = new Symbol(ASIGNACION, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                                after_symbl = tmp_symbl;
                                return tmp_symbl;
                            } else {
                                text = getInerText.getAsignacion(yytext());
                                tmp_symbl = new Symbol(ASIGNACION_ESP, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                                after_symbl = tmp_symbl;
                                return tmp_symbl;
                            }
                        }
                    }

            } else {
                espacios = InerLex.getCantidadEspacios();
                num = InerLex.isNumero();
                InerLex.reinicioLex();
                if(num){
                    tmp_symbl = new Symbol(ASIGNACION_NUM, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                    after_symbl = tmp_symbl;
                    return tmp_symbl;
                }else{
                    if (espacios == 0) {
                        tmp_symbl = new Symbol(ASIGNACION, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    } else {
                        text = getInerText.getAsignacion(yytext());
                        tmp_symbl = new Symbol(ASIGNACION_ESP, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
                        after_symbl = tmp_symbl;
                        return tmp_symbl;
                    }
                }
            }
            }
            // fall through
          case 19: break;
          case 9:
            { String text = getInerText.getAsignacion(yytext());
            //System.out.println("Formato de ID:" + text);
            tmp_symbl = new Symbol(ASIG_ID, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
            after_symbl = tmp_symbl;
            return tmp_symbl;
            }
            // fall through
          case 20: break;
          case 10:
            { String text = getInerText.getAsignacion(yytext());
            System.out.println("Fecha encontrada:" + text);
            tmp_symbl = new Symbol(DATE, after_symbl.sym, 0, new token(text, yycolumn + 1, yyline + 1));
            after_symbl = tmp_symbl;
            return tmp_symbl;
            }
            // fall through
          case 21: break;
          case 11:
            { tmp_symbl = new Symbol (NEW_FORM,after_symbl.sym,0, new token(yytext(),yycolumn+1,yyline+1));
            after_symbl = tmp_symbl;
            return tmp_symbl;
            }
            // fall through
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
